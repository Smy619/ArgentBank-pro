swagger: "2.0"
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: "1.0.0"
  termsOfService: "http://swagger.io/terms/"
host: localhost:3001
basePath: /api/v1
schemes:
  - http

paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
        "200":
          description: Login Successfully
          schema:
            $ref: "#/definitions/LoginResponse"
        "400":
          description: Invalid Fields

  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Signup Successfully
          schema:
            $ref: "#/definitions/ApiResponse"

  /user/profile:
    get:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: Get user profile
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            $ref: "#/definitions/UserProfileResponse"
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: Update user profile
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UserProfile"
      responses:
        "200":
          description: User profile updated
          schema:
            $ref: "#/definitions/ApiResponse"

  /accounts/{accountId}/transactions:
    get:
      security:
        - Bearer: []
      tags:
        - Transactions Module
      summary: Get all transactions for a specific account (with optional date filtering)
      parameters:
        - name: accountId
          in: path
          required: true
          type: string
          description: The ID of the account whose transactions are requested
        - name: startDate
          in: query
          required: false
          type: string
          format: date
          x-example: "2025-10-01"
          description: Filter transactions starting from this date (inclusive)
        - name: endDate
          in: query
          required: false
          type: string
          format: date
          x-example: "2025-10-31"
          description: Filter transactions until this date (inclusive)
      responses:
        "200":
          description: List of transactions
          schema:
            $ref: "#/definitions/TransactionsResponse"
        "401":
          description: Unauthorized - missing or invalid Authorization token
        "403":
          description: Forbidden - trying to access another user's account
        "404":
          description: Account not found
        "500":
          description: Internal server error - unexpected problem (e.g. database issues)

  /transactions/{transactionId}:
    get:
      security:
        - Bearer: []
      tags:
        - Transactions Module
      summary: Get transaction details
      parameters:
        - name: transactionId
          in: path
          required: true
          type: string
          description: The unique ID of the transaction
      responses:
        "200":
          description: Transaction details returned successfully
          schema:
            $ref: "#/definitions/TransactionResponse"
        "401":
          description: Unauthorized - missing or invalid Authorization token
        "403":
          description: Forbidden - trying to access another user's transaction
        "404":
          description: Transaction not found
        "500":
          description: Internal server error - unexpected problem (e.g. database issues)

    patch:
      security:
        - Bearer: []
      tags:
        - Transactions Module
      summary: Partially update a transaction (category or note)
      parameters:
        - name: transactionId
          in: path
          required: true
          type: string
          description: The unique ID of the transaction to update
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              category:
                type: string
                description: The category of the transaction (can be null to remove)
              note:
                type: string
                description: The note for the transaction (can be null to remove)
            example:
              category: null
              note: "Updated note"
      responses:
        "200":
          description: Transaction updated successfully
          schema:
            $ref: "#/definitions/TransactionResponse"
        "400":
          description: Bad Request - invalid or malformed input
        "401":
          description: Unauthorized - missing or invalid Authorization token
        "403":
          description: Forbidden - not allowed to modify this transaction
        "404":
          description: Transaction not found
        "500":
          description: Internal server error - unexpected problem (e.g. database failures)

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

definitions:
  User:
    type: object
    properties:
      email: { type: string }
      password: { type: string }
      firstName: { type: string }
      lastName: { type: string }
      userName: { type: string }

  Login:
    type: object
    properties:
      email: { type: string }
      password: { type: string }

  ApiResponse:
    type: object
    properties:
      status: { type: integer }
      message: { type: string }

  LoginResponse:
    type: object
    properties:
      token: { type: string }

  UserProfile:
    type: object
    properties:
      userName: { type: string }
      firstName: { type: string }
      lastName: { type: string }

  UserProfileResponse:
    type: object
    properties:
      status: { type: integer }
      message: { type: string }
      body:
        $ref: "#/definitions/UserProfile"

  UpdateTransaction:
    type: object
    properties:
      category: { type: string, example: "Food" }
      note: { type: string, example: "Dinner with friends" }

  Transaction:
    type: object
    properties:
      id: { type: string }
      date: { type: string, format: date-time }
      description: { type: string }
      amount: { type: number }
      type: { type: string, enum: [credit, debit] }
      category: { type: string }
      note: { type: string }

  TransactionsResponse:
    type: object
    properties:
      status: { type: integer }
      message: { type: string }
      body:
        type: array
        items:
          $ref: "#/definitions/Transaction"

  TransactionResponse:
    type: object
    properties:
      status: { type: integer }
      message: { type: string }
      body:
        $ref: "#/definitions/Transaction"
